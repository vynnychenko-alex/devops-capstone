version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description: Workflow ID
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            # aws cloudformation delete-stack --stack-name nginxapp-<< parameters.workflow_id >>

jobs:
    deploy-infrastructure:
        docker:
            - image: cimg/aws:2023.03
        steps:
          - checkout
          - run:
              name: Ensure infrastructure exists
              command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/servers.yml \
                  --tags project=nginxapp \
                  --stack-name "nginxapp-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          - run:
              name: Add back-end ip to ansible inventory
              command: |
                aws ec2 describe-instances \
                \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=nginxapp" \
                    --output text >> .circleci/ansible/inventory.txt
                    cat .circleci/ansible/inventory.txt
          - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
          - destroy-environment:
              workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    configure-infrastructure:
      docker:
          - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["a9:35:3c:2f:24:b1:7d:69:b8:a5:38:7b:ff:dc:81:9c"] 

        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add python curl
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              apk add --update ansible
              apk add --update tar
              apk add --update gzip
        - run:
            name: Configure server
            command: |
              echo "Contents  of the inventory.txt file is -------"
              cat ~/project/.circleci/ansible/inventory.txt
              ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    cloudfront-update:
        docker:
          - image: cimg/aws:2023.04
        steps:
          - checkout
          - attach_workspace:
              at: ~/
          - run:
              name: Install dependencies
              command: |
                # your code here 
          - run:
              name: Update cloudfront distribution
              command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/cloudfront.yml \
                  --stack-name InitialStack \
                  --parameter-overrides WorkflowID="nginxapp-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --tags project=nginxapp
          - destroy-environment:
              workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          - revert-migrations:
              workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
    
    docker-build:
        docker:
          - image: docker:17.05.0-ce-git
        steps:
          - checkout
          - setup_remote_docker
          - run:
              name: Lint Dockerfile
              command: docker run --rm --interactive hadolint/hadolint < Dockerfile
          - run:
              name: Build Docker image and upload
              command: |
                cd app
                dockerpath=dimension90/nginxapp
                docker build --tag=nginxapp .
                docker login -u $DOCKER_USER -p $DOCKER_PASS
                docker tag nginxapp:latest $dockerpath:latest
                docker push $dockerpath:latest

workflows:
  default:
    jobs:
      - deploy-infrastructure:
          requires: [docker-build]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - docker-build