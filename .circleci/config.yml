version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description: Workflow ID
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name nginxapp-<< parameters.workflow_id >>

jobs:
    deploy-infrastructure:
        docker:
            - image: cimg/aws:2023.03
        steps:
          - checkout
          - run:
              name: Ensure infrastructure exists
              command: |
                  aws cloudformation deploy \
                    --template-file .circleci/files/servers.yml \
                    --tags project=nginxapp \
                    --stack-name "nginxapp-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

          - run:
              name: Add back-end ip to ansible inventory
              command: |
                    aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filters "Name=tag:Name,Values=server-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --output text >> .circleci/ansible/inventory.txt
                    cat .circleci/ansible/inventory.txt
          - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
          - destroy-environment:
              workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    add-to-nlb:
        docker:
            - image: cimg/aws:2023.03
        steps:
          - run:
              name: Add current instance to NLB and remove others
              command: |
              
                TARGET_GROUP_NAME="nginxappTG"
                TAG_NAME="Name"
                TAG_VALUE="server-${CIRCLE_WORKFLOW_ID:0:7}"

                TARGET_GROUP_ARN=$(aws resourcegroupstaggingapi get-resources --tag-filters "Key=Name,Values=nginxappTG" --resource-type-filters elasticloadbalancing:targetgroup --query "ResourceTagMappingList[0].ResourceARN" --output text)

                # Get a list of all registered targets in the target group
                registeredTargets=$(aws elbv2 describe-target-health --target-group-arn "$TARGET_GROUP_ARN" --query 'TargetHealthDescriptions[].Target.Id' --output text)

                # Deregister each target from the target group
                for targetId in $registeredTargets; do
                  aws elbv2 deregister-targets --target-group-arn "$TARGET_GROUP_ARN" --targets Id="$targetId"
                done

                echo "All instances have been cleared from the target group."
                
                INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:$TAG_NAME,Values=$TAG_VALUE" --query "Reservations[].Instances[].InstanceId" --output text)

                aws elbv2 register-targets --target-group-arn $TARGET_GROUP_ARN --targets Id=$INSTANCE_ID

                echo "Instance with tag '$TAG_NAME:$TAG_VALUE' has been added to the target group '$TARGET_GROUP_NAME'."



    configure-infrastructure:
      docker:
          - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["a9:35:3c:2f:24:b1:7d:69:b8:a5:38:7b:ff:dc:81:9c"] 

        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add python curl
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              apk add --update ansible
              apk add --update tar
              apk add --update gzip
        - run:
            name: Configure server
            command: |
              echo "Contents  of the inventory.txt file is -------"
              cat ~/project/.circleci/ansible/inventory.txt
              ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    docker-lint:
        docker:
          - image: circleci/python:3.8
        steps:
          - checkout
          - setup_remote_docker
          - attach_workspace:
              at: ~/
          # Lint the Dockerfile
          - run:
              name: Lint Dockerfile
              command: docker run --rm --interactive hadolint/hadolint < ~/project/app/Dockerfile

      
    docker-build:
        docker:
          - image: docker:17.05.0-ce-git
        steps:
          - checkout
          - setup_remote_docker
          - run:
              name: Build Docker image and upload
              command: |
                cd app
                dockerpath=dimension90/nginxapp
                docker build --tag=nginxapp .
                docker login -u $DOCKER_USER -p $DOCKER_PASS
                docker tag nginxapp:latest $dockerpath:latest
                docker push $dockerpath:latest
    smoke-test:
        docker:
          - image: cimg/aws:2023.03
        steps:
          - run:
              name: Smoke test.
              command: |

                PUBLIC_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=server-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

                URL="${PUBLIC_IP}:30000"            
                echo ${URL} 
                if curl -s ${URL} | grep "Hello"
                then
                  exit 0
                else
                  exit 1
                fi
          - destroy-environment:
              workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


    cleanup:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - run:
              name: Install dependencies
              command: |
                sudo apt update
                sudo apt install -y awscli
          - run:
              name: Get old stack workflow id and remove
              command: |
                _OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text)
                export OldWorkflowID=${_OldWorkflowID: -7}
                echo OldWorkflowID: "${OldWorkflowID}"
                echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

                if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
                then
                  echo ${OldWorkflowID}
                  aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                fi
  

workflows:
  default:
    jobs:
      - deploy-infrastructure:
          requires: [docker-build]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - docker-build:
          requires: [docker-lint]
      - docker-lint
      - smoke-test:
          requires: [configure-infrastructure]
      - add-to-nlb:
          requires: [smoke-test]
      - cleanup:
          requires: [add-to-nlb]